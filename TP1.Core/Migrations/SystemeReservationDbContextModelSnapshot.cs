// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TP1.Core;

#nullable disable

namespace TP1.Core.Migrations
{
    [DbContext(typeof(SystemeReservationDbContext))]
    partial class SystemeReservationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a94202a9-31eb-4f81-800b-c0578c8d080b"),
                            Name = "Administrateur",
                            NormalizedName = "ADMINISTRATEUR"
                        },
                        new
                        {
                            Id = new Guid("be2ea424-dda0-44d7-a3a6-6cbdfaf41723"),
                            Name = "Gérant",
                            NormalizedName = "GÉRANT"
                        },
                        new
                        {
                            Id = new Guid("1a2e3790-e4e9-4c29-a8c5-f1e6df9c2710"),
                            Name = "Commis",
                            NormalizedName = "COMMIS"
                        },
                        new
                        {
                            Id = new Guid("09bdb779-2b94-4320-b2e0-3904f8ec68ed"),
                            Name = "Utilisateur",
                            NormalizedName = "UTILISATEUR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("2dbac27d-7070-427e-b26d-171a78672d11"),
                            RoleId = new Guid("a94202a9-31eb-4f81-800b-c0578c8d080b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Identité.Utilisateur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2dbac27d-7070-427e-b26d-171a78672d11"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83a561ae-f37b-43b0-92b1-90ce60e51cd4",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDsgaKkV6Km/6axBQ3Y+MSc/VLlnWsizn3RUmJsAR+LUsspG8myWMiidSgAP7cONXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29d25980-5067-4065-bd56-1dc4046b457d",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Adresse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ConducteurID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumeroCivique")
                        .HasColumnType("int");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SuccursaleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ConducteurID")
                        .IsUnique()
                        .HasFilter("[ConducteurID] IS NOT NULL");

                    b.HasIndex("SuccursaleID")
                        .IsUnique()
                        .HasFilter("[SuccursaleID] IS NOT NULL");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Conducteur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Courriel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InformationsValides")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermisDeConduire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoitureId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VoitureId");

                    b.ToTable("Conducteurs");
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConducteurId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FermeturePlanifie")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FermetureReel")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OuverturePlanifie")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OuvertureReel")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SuccursaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("statut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConducteurId");

                    b.HasIndex("SuccursaleId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Texte")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoitureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("VoitureId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Succursale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Statut")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Succursales");
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Voiture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Annee")
                        .HasColumnType("int");

                    b.Property<string>("Couleur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<int?>("Kilometrage")
                        .HasColumnType("int");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Marque")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modele")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroImmatriculation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroSerie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SuccursaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surnom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ValeurEstimee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("etat")
                        .HasColumnType("int");

                    b.Property<int>("statut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.HasIndex("SuccursaleId");

                    b.ToTable("Voitures");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TP1.Core.Domain.Entities.Identité.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TP1.Core.Domain.Entities.Identité.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TP1.Core.Domain.Entities.Identité.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TP1.Core.Domain.Entities.Identité.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Adresse", b =>
                {
                    b.HasOne("TP1.Core.Domain.Entities.Locations.Conducteur", "Conducteur")
                        .WithOne("Adresse")
                        .HasForeignKey("TP1.Core.Domain.Entities.Locations.Adresse", "ConducteurID");

                    b.HasOne("TP1.Core.Domain.Entities.Locations.Succursale", "Succursale")
                        .WithOne("adresse")
                        .HasForeignKey("TP1.Core.Domain.Entities.Locations.Adresse", "SuccursaleID");

                    b.Navigation("Conducteur");

                    b.Navigation("Succursale");
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Conducteur", b =>
                {
                    b.HasOne("TP1.Core.Domain.Entities.Locations.Voiture", "Voiture")
                        .WithMany()
                        .HasForeignKey("VoitureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Voiture");
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Location", b =>
                {
                    b.HasOne("TP1.Core.Domain.Entities.Locations.Conducteur", "Conducteur")
                        .WithMany()
                        .HasForeignKey("ConducteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TP1.Core.Domain.Entities.Locations.Succursale", "Succursale")
                        .WithMany()
                        .HasForeignKey("SuccursaleId");

                    b.Navigation("Conducteur");

                    b.Navigation("Succursale");
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Note", b =>
                {
                    b.HasOne("TP1.Core.Domain.Entities.Locations.Location", null)
                        .WithMany("Note")
                        .HasForeignKey("LocationId");

                    b.HasOne("TP1.Core.Domain.Entities.Locations.Voiture", null)
                        .WithMany("Note")
                        .HasForeignKey("VoitureId");
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Voiture", b =>
                {
                    b.HasOne("TP1.Core.Domain.Entities.Locations.Location", "Location")
                        .WithOne("voiture")
                        .HasForeignKey("TP1.Core.Domain.Entities.Locations.Voiture", "LocationId");

                    b.HasOne("TP1.Core.Domain.Entities.Locations.Succursale", "Succursale")
                        .WithMany()
                        .HasForeignKey("SuccursaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Succursale");
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Conducteur", b =>
                {
                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Location", b =>
                {
                    b.Navigation("Note");

                    b.Navigation("voiture")
                        .IsRequired();
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Succursale", b =>
                {
                    b.Navigation("adresse")
                        .IsRequired();
                });

            modelBuilder.Entity("TP1.Core.Domain.Entities.Locations.Voiture", b =>
                {
                    b.Navigation("Note");
                });
#pragma warning restore 612, 618
        }
    }
}
